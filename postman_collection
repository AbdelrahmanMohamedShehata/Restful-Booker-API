{
	"info": {
		"_postman_id": "64b1834c-1e39-4811-9080-45fb46ab5b01",
		"name": "restful booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41737437",
		"_collection_link": "https://team-1-9277.postman.co/workspace/team~c724404e-6ec3-41dd-9d2d-10c6344510e9/collection/41737437-64b1834c-1e39-4811-9080-45fb46ab5b01?action=share&source=collection_link&creator=41737437"
	},
	"item": [
		{
			"name": "Login and get Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\" check response status to be 200 and ok \", function() // 1\r",
							" {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"// when you have happy scenarios and bad scenarios with result status 200 OK so you need two do the next two test cases and test the response body for both scenarios.\r",
							"pm.test(\" check about having token so Authorized user\", function() // 2  for happy scenario\r",
							"{\r",
							"    pm.expect(pm.response.json()).to.have.property(\"token\");\r",
							"});\r",
							"pm.test(\" check about having reason bad credentials or unauthorized users\", function()// 3 \r",
							"// for negative scenario\r",
							"{\r",
							"    pm.expect(pm.response.json()).to.not.have.property(\"reason\");\r",
							"});\r",
							"pm.test(\"Response time is less than 1000ms\", function () // 4\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"token\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"token\"\r",
							"    ]\r",
							"}\r",
							"pm.test(\"check json Schema for Authorized users \", function () // 5 happy scenario schema\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"const schema1 = { \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"reason\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"reason\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"check json Schema for unAuthorized users \", function () // 6 for bad scenario schema\r",
							"{\r",
							"    pm.response.to.not.have.jsonSchema(schema1);\r",
							"});\r",
							"\r",
							" pm.test(\"Content-Type is present\", function () // 7 \r",
							"  {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    \r",
							"pm.test(\" check content length header \", function () // 8\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\" check server header \", function () // 9\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Heroku\");\r",
							"});\r",
							"\r",
							"let headers = pm.response.headers.all(); \r",
							"let totalHeaderSize = 0;\r",
							"\r",
							"// Calculate the size of each header (key + value)\r",
							"headers.forEach(header =>\r",
							" {\r",
							"    totalHeaderSize += header.key.length + header.value.length;\r",
							"});\r",
							"\r",
							"// Log the total header size\r",
							"console.log(\"Total header size in bytes:\", totalHeaderSize); // 10\r",
							"pm.test(\"Total header size\", function() {\r",
							"    pm.expect(totalHeaderSize).to.be.below(800);  // Example check: header size below 1000 bytes\r",
							"});\r",
							"\r",
							" const response = pm.response.json();\r",
							" const token =response.token;\r",
							" pm.collectionVariables.set(\"Token\",token);\r",
							"\r",
							"pm.test(\"check token \", function() // 11\r",
							"{\r",
							"    const ActualToken = pm.collectionVariables.get(\"Token\");\r",
							"    const ExpectedToken = token;\r",
							"    pm.expect(ExpectedToken).to.eql(ActualToken);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"{{Username}}\",\r\n    \"password\" : \"{{Password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/auth",
					"host": [
						"{{URL}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responsedata = pm.response.json();\r",
							"const id = responsedata.bookingid;\r",
							"pm.collectionVariables.set(\"bookingid\", id);\r",
							"console.log(id);\r",
							"pm.test(\" check response status to be 200 and ok \", function() //1\r",
							" {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"pm.test(\"check firstname\", function() //2\r",
							"{\r",
							"    const Actualfirstname = pm.collectionVariables.get(\"First_Name\");\r",
							"    const Expectedfirstname = responsedata.booking.firstname;\r",
							"    pm.expect(Expectedfirstname).to.eql(Actualfirstname);\r",
							"});\r",
							"\r",
							"pm.test(\"check Lastname\", function() // 3\r",
							"{\r",
							"    const Actuallastname = pm.collectionVariables.get(\"Last_Name\");\r",
							"    const Expectedlastname = responsedata.booking.lastname;\r",
							"    pm.expect(Expectedlastname).to.eql(Actuallastname);\r",
							"});\r",
							"\r",
							"pm.test(\"check TotalPrice\", function()  // 4 \r",
							"{\r",
							"    const Actualprice = pm.collectionVariables.get(\"Total_Price\");\r",
							"    const Expectedprice = responsedata.booking.totalprice;\r",
							"    const exchange = Actualprice - Expectedprice;\r",
							"    pm.expect(Expectedprice).to.eql(Actualprice-exchange);\r",
							"    pm.expect(exchange).to.within(0.01,0.99);\r",
							"});\r",
							"\r",
							"pm.test(\"check depositpaid\", function()  // 5\r",
							" {\r",
							"    pm.expect(responsedata.booking.depositpaid).to.eql(true); \r",
							"});\r",
							"\r",
							"pm.test(\"check checkin date\", function() // 6\r",
							"{\r",
							"    const actualDate = pm.collectionVariables.get(\"Checkin_Date\");\r",
							"    const ActualDate = new Date(actualDate).toISOString().split(\"T\")[0];\r",
							"    console.log(ActualDate);\r",
							"    const ExpectedDate = responsedata.booking.bookingdates.checkin;\r",
							"    pm.expect(ExpectedDate).to.eql(ActualDate);\r",
							"});\r",
							"\r",
							"pm.test(\"check checkout date\", function() // 7\r",
							"{\r",
							"    const actualDate = pm.collectionVariables.get(\"Checkout_Date\");\r",
							"    const ActualDate = new Date(actualDate).toISOString().split(\"T\")[0];\r",
							"    const ExpectedDate = responsedata.booking.bookingdates.checkout;\r",
							"    pm.expect(ExpectedDate).to.eql(ActualDate);\r",
							"});\r",
							"\r",
							"pm.test(\"check additionalneeds\", function() //8\r",
							"{ // Fixed duplicate test name\r",
							"    pm.expect(responsedata.booking.additionalneeds).to.eql(\"Breakfast\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () // 9\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () // 10\r",
							"  {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    \r",
							"pm.test(\" check content Type is json \", function () // 11\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\" check server header \", function () // 12\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Heroku\");\r",
							"});\r",
							"\r",
							"let headers = pm.response.headers.all(); \r",
							"let totalHeaderSize = 0;\r",
							"\r",
							"// Calculate the size of each header (key + value)\r",
							"headers.forEach(header =>\r",
							" {\r",
							"    totalHeaderSize += header.key.length + header.value.length;\r",
							"});\r",
							"\r",
							"// Log the total header size\r",
							"console.log(\"Total header size in bytes:\", totalHeaderSize); // 13\r",
							"pm.test(\"Total header size\", function() {\r",
							"    pm.expect(totalHeaderSize).to.be.below(800);  // Example check: header size below 1000 bytes\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"bookingid\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"booking\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"firstname\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"lastname\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"totalprice\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"depositpaid\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"bookingdates\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"checkin\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"checkout\": {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"checkin\",\r",
							"            \"checkout\"\r",
							"          ]\r",
							"        },\r",
							"        \"additionalneeds\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"firstname\",\r",
							"        \"lastname\",\r",
							"        \"totalprice\",\r",
							"        \"depositpaid\",\r",
							"        \"bookingdates\",\r",
							"        \"additionalneeds\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"bookingid\",\r",
							"    \"booking\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"check json Schema for success data \", function () // 14\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const first_name = pm.variables.replaceIn('{{$randomFirstName}}')\r",
							"pm.collectionVariables.set(\"First_Name\", first_name);\r",
							"const last_name = pm.variables.replaceIn('{{$randomLastName}}')\r",
							"pm.collectionVariables.set(\"Last_Name\", last_name);\r",
							"const total_price = pm.variables.replaceIn('{{$randomPrice}}')\r",
							"pm.collectionVariables.set(\"Total_Price\", total_price);\r",
							"const checkin_date = pm.variables.replaceIn('{{$randomDatePast}}')\r",
							"pm.collectionVariables.set(\"Checkin_Date\", checkin_date);\r",
							"const checkout_date = pm.variables.replaceIn('{{$randomDateFuture}}')\r",
							"pm.collectionVariables.set(\"Checkout_Date\", checkout_date);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{First_Name}}\",\r\n    \"lastname\" : \"{{Last_Name}}\",\r\n    \"totalprice\" : {{Total_Price}},\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{Checkin_Date}}\",\r\n        \"checkout\" : \"{{Checkout_Date}}\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/booking",
					"host": [
						"{{URL}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responsedata = pm.response.json();\r",
							"\r",
							"pm.test(\" check response status to be 200 and ok \", function()  // 1 \r",
							" {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"check firstname\", function() // 2\r",
							"{\r",
							"    const Actualfirstname = pm.collectionVariables.get(\"First_Name\");\r",
							"    const Expectedfirstname = responsedata.firstname;\r",
							"    pm.expect(Expectedfirstname).to.eql(Actualfirstname);\r",
							"});\r",
							"\r",
							"pm.test(\"check Lastname\", function() // 3  \r",
							"{\r",
							"    const Actuallastname = pm.collectionVariables.get(\"Last_Name\");\r",
							"    const Expectedlastname = responsedata.lastname;\r",
							"    pm.expect(Expectedlastname).to.eql(Actuallastname);\r",
							"});\r",
							"\r",
							"pm.test(\"check TotalPrice\", function()  // 4\r",
							"{\r",
							"    const Actualprice = pm.collectionVariables.get(\"Total_Price\");\r",
							"    const Expectedprice = responsedata.totalprice;\r",
							"    const exchange = Actualprice - Expectedprice;\r",
							"    pm.expect(Expectedprice).to.eql(Actualprice-exchange);\r",
							"    pm.expect(exchange).to.within(0.01,0.99);\r",
							"});\r",
							"\r",
							"pm.test(\"check depositpaid\", function()  // 5\r",
							"{\r",
							"    pm.expect(responsedata.depositpaid).to.eql(true); \r",
							"});\r",
							"\r",
							"pm.test(\"check checkin date\", function() // 6\r",
							"{\r",
							"    const actualDate = pm.collectionVariables.get(\"Checkin_Date\");\r",
							"    const ActualDate = new Date(actualDate).toISOString().split(\"T\")[0];\r",
							"    console.log(ActualDate);\r",
							"    const ExpectedDate = responsedata.bookingdates.checkin;\r",
							"    pm.expect(ExpectedDate).to.eql(ActualDate);\r",
							"});\r",
							"\r",
							"pm.test(\"check checkout date\", function()   // 7\r",
							" {\r",
							"    const actualDate = pm.collectionVariables.get(\"Checkout_Date\");\r",
							"    const ActualDate = new Date(actualDate).toISOString().split(\"T\")[0];\r",
							"    const ExpectedDate = responsedata.bookingdates.checkout;\r",
							"    pm.expect(ExpectedDate).to.eql(ActualDate);\r",
							"});\r",
							"\r",
							"pm.test(\"check additionalneeds\", function() // 8 \r",
							"{ \r",
							"    pm.expect(responsedata.additionalneeds).to.eql(\"Breakfast\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () // 9\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () // 10 \r",
							"  {\r",
							"        pm.response.to.have.header(\"Content-Type\");\r",
							"    });\r",
							"    \r",
							"pm.test(\" check content Type is json \", function () // 11\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\" check server header \", function () // 12\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Heroku\");\r",
							"});\r",
							"\r",
							"let headers = pm.response.headers.all(); \r",
							"let totalHeaderSize = 0;\r",
							"\r",
							"// Calculate the size of each header (key + value)\r",
							"headers.forEach(header =>\r",
							" {\r",
							"    totalHeaderSize += header.key.length + header.value.length;\r",
							"});\r",
							"\r",
							"// Log the total header size\r",
							"console.log(\"Total header size in bytes:\", totalHeaderSize); // 13\r",
							"pm.test(\"Total header size\", function() {\r",
							"    pm.expect(totalHeaderSize).to.be.below(800);  // Example check: header size below 1000 bytes\r",
							"});\r",
							"\r",
							"const schema ={\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"check json Schema for success data \", function () // 14\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/booking/{{bookingid}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get booking ID by first and last name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\" check response status to be 200 and ok \", function() //1\r",
							" {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\" check content Type is json \", function () // 2\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\" check server header \", function () // 3\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Heroku\");\r",
							"});\r",
							"\r",
							"let headers = pm.response.headers.all(); \r",
							"let totalHeaderSize = 0;\r",
							"\r",
							"headers.forEach(header =>\r",
							" {\r",
							"    totalHeaderSize += header.key.length + header.value.length;\r",
							"});\r",
							"\r",
							"// Log the total header size\r",
							"console.log(\"Total header size in bytes:\", totalHeaderSize); // 4\r",
							"pm.test(\"Total header size\", function() {\r",
							"    pm.expect(totalHeaderSize).to.be.below(850);  \r",
							"});\r",
							"\r",
							"pm.test(\"Every bookingid is an integer\", function () // 5\r",
							"{\r",
							"        pm.expect(jsonData[0]).to.include.property(\"bookingid\");\r",
							"        pm.expect(Number.isInteger(jsonData[0].bookingid)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Every bookingid is not a String\", function () // 6\r",
							"{\r",
							"    pm.expect(typeof jsonData.bookingid).to.not.eql(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () // 7\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"validate the booking id value \", function() // 8\r",
							"{\r",
							"    ActualbookingId = pm.collectionVariables.get(\"bookingid\");\r",
							"    ExpectdbookingId = jsonData[0].bookingid;\r",
							"    pm.expect(ExpectdbookingId).to.eql(Number(ActualbookingId));\r",
							"    \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/booking?firstname={{First_Name}}&lastname={{Last_Name}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{First_Name}}"
						},
						{
							"key": "lastname",
							"value": "{{Last_Name}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "partially updating Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responsedata = pm.response.json();\r",
							"\r",
							"pm.test(\" check response status to be 200 and ok \", function() // 1 \r",
							" {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"check firstname\", function()  // 2\r",
							"{\r",
							"    const Expectedfirstname = responsedata.firstname;\r",
							"    pm.expect(Expectedfirstname).to.eql(\"Jim\");\r",
							"});\r",
							"\r",
							"pm.test(\"check Lastname\", function()   // 3\r",
							"{\r",
							"    const Expectedlastname = responsedata.lastname;\r",
							"    pm.expect(Expectedlastname).to.eql(\"Carry\");\r",
							"});\r",
							"\r",
							"pm.test(\"check json TotalPrice\", function()    // 4 \r",
							"{\r",
							"    const Actualprice = pm.collectionVariables.get(\"Total_Price\");\r",
							"    const Expectedprice = responsedata.totalprice;\r",
							"    const exchange = Actualprice - Expectedprice;\r",
							"    pm.expect(Expectedprice).to.eql(Actualprice-exchange);\r",
							"    pm.expect(exchange).to.within(0.01,0.99);\r",
							"});\r",
							"\r",
							"pm.test(\"check depositpaid\", function()   // 5\r",
							"{\r",
							"    pm.expect(responsedata.depositpaid).to.eql(true); \r",
							"});\r",
							"\r",
							"pm.test(\"check checkin date\", function()  // 6\r",
							"{\r",
							"    const actualDate = pm.collectionVariables.get(\"Checkin_Date\");\r",
							"    const ActualDate = new Date(actualDate).toISOString().split(\"T\")[0];\r",
							"    console.log(ActualDate);\r",
							"    const ExpectedDate = responsedata.bookingdates.checkin;\r",
							"    pm.expect(ExpectedDate).to.eql(ActualDate);\r",
							"});\r",
							"\r",
							"pm.test(\"check checkout date\", function()   // 7\r",
							"{\r",
							"    const actualDate = pm.collectionVariables.get(\"Checkout_Date\");\r",
							"    const ActualDate = new Date(actualDate).toISOString().split(\"T\")[0];\r",
							"    const ExpectedDate = responsedata.bookingdates.checkout;\r",
							"    pm.expect(ExpectedDate).to.eql(ActualDate);\r",
							"});\r",
							"\r",
							"pm.test(\"check additionalneeds\", function()  // 8\r",
							"{ \r",
							"    pm.expect(responsedata.additionalneeds).to.eql(\"Breakfast\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () // 9\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () // 10 \r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"    \r",
							"pm.test(\" check content Type is json \", function () // 11\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\" check server header \", function () // 12\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Heroku\");\r",
							"});\r",
							"\r",
							"let headers = pm.response.headers.all(); \r",
							"let totalHeaderSize = 0;\r",
							"\r",
							"// Calculate the size of each header (key + value)\r",
							"headers.forEach(header =>\r",
							" {\r",
							"    totalHeaderSize += header.key.length + header.value.length;\r",
							"});\r",
							"\r",
							"// Log the total header size\r",
							"console.log(\"Total header size in bytes:\", totalHeaderSize); // 13\r",
							"pm.test(\"Total header size\", function() {\r",
							"    pm.expect(totalHeaderSize).to.be.below(800);  // Example check: header size below 1000 bytes\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"check json Schema for success data \", function () // 14\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Carry\"\r\n}    ",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/booking/{{bookingid}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updating booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responsedata = pm.response.json();\r",
							"\r",
							"pm.test(\" check response status to be 200 and ok \", function() // 1\r",
							" {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"check firstname\", function()  // 2\r",
							"{\r",
							"    const Expectedfirstname = responsedata.firstname;\r",
							"    pm.expect(Expectedfirstname).to.eql(\"James\");\r",
							"});\r",
							"\r",
							"pm.test(\"check Lastname\", function()  // 3\r",
							"{\r",
							"    const Expectedlastname = responsedata.lastname;\r",
							"    pm.expect(Expectedlastname).to.eql(\"Brown\");\r",
							"});\r",
							"\r",
							"pm.test(\"check TotalPrice\", function() // 4\r",
							"{\r",
							"    const Expectedprice = responsedata.totalprice;\r",
							"    pm.expect(Expectedprice).to.eql(111);\r",
							"});\r",
							"\r",
							"pm.test(\"check depositpaid\", function() // 5\r",
							"{\r",
							"    pm.expect(responsedata.depositpaid).to.eql(true); \r",
							"});\r",
							"\r",
							"pm.test(\"check checkin date\", function()  // 6\r",
							"{\r",
							"    const actualDate = pm.collectionVariables.get(\"Checkin_Date\");\r",
							"    const ActualDate = new Date(actualDate).toISOString().split(\"T\")[0];\r",
							"    console.log(ActualDate);\r",
							"    const ExpectedDate = responsedata.bookingdates.checkin;\r",
							"    pm.expect(ExpectedDate).to.eql(ActualDate);\r",
							"});\r",
							"\r",
							"pm.test(\"check checkout date\", function()   // 7\r",
							"{\r",
							"    const actualDate = pm.collectionVariables.get(\"Checkout_Date\");\r",
							"    const ActualDate = new Date(actualDate).toISOString().split(\"T\")[0];\r",
							"    const ExpectedDate = responsedata.bookingdates.checkout;\r",
							"    pm.expect(ExpectedDate).to.eql(ActualDate);\r",
							"});\r",
							"\r",
							"pm.test(\"check additionalneeds\", function()  // 8\r",
							"{ \r",
							"    pm.expect(responsedata.additionalneeds).to.eql(\"Lunch\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () // 9\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () // 10\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"    \r",
							"pm.test(\" check content Type is json \", function () // 11\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\" check server header \", function () // 12\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Heroku\");\r",
							"});\r",
							"\r",
							"let headers = pm.response.headers.all(); \r",
							"let totalHeaderSize = 0;\r",
							"\r",
							"// Calculate the size of each header (key + value)\r",
							"headers.forEach(header =>\r",
							" {\r",
							"    totalHeaderSize += header.key.length + header.value.length;\r",
							"});\r",
							"\r",
							"// Log the total header size\r",
							"console.log(\"Total header size in bytes:\", totalHeaderSize); // 13\r",
							"pm.test(\"Total header size\", function() {\r",
							"    pm.expect(totalHeaderSize).to.be.below(800);  // Example check: header size below 1000 bytes\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"check json Schema for success data \", function () // 14\r",
							"{\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token ={{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" :\"{{Checkin_Date}}\",\r\n        \"checkout\" : \"{{Checkout_Date}}\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/booking/{{bookingid}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function() // 1\r",
							"{\r",
							"  pm.response.to.have.status(201);\r",
							"  pm.expect(pm.response.status).to.eql(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is Created\", function ()  // 2\r",
							"{\r",
							"  pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () // 3\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () // 4\r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"    \r",
							"pm.test(\"Check content Type is Text \", function () // 5\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\")\r",
							"});\r",
							"\r",
							"pm.test(\"Check server header \", function () // 6\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Heroku\");\r",
							"});\r",
							"\r",
							"let headers = pm.response.headers.all(); \r",
							"let totalHeaderSize = 0;\r",
							"\r",
							"// Calculate the size of each header (key + value)\r",
							"headers.forEach(header =>\r",
							"{\r",
							"    totalHeaderSize += header.key.length + header.value.length;\r",
							"});\r",
							"\r",
							"// Log the total header size\r",
							"console.log(\"Total header size in bytes:\", totalHeaderSize); // 7\r",
							"pm.test(\"Total header size\", function() {\r",
							"    pm.expect(totalHeaderSize).to.be.below(800);  // Example check: header size below 1000 bytes\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{URL}}/booking/{{bookingid}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Booking Ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\" check response status to be 200 and ok \", function() //1\r",
							" {\r",
							"  pm.response.to.have.status(200);\r",
							"  pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\" check content Type is json \", function () // 2\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\" check server header \", function () // 3\r",
							"{\r",
							" pm.expect(pm.response.headers.get(\"Server\")).to.eql(\"Heroku\");\r",
							"});\r",
							"\r",
							"let headers = pm.response.headers.all(); \r",
							"let totalHeaderSize = 0;\r",
							"\r",
							"headers.forEach(header =>\r",
							" {\r",
							"    totalHeaderSize += header.key.length + header.value.length;\r",
							"});\r",
							"\r",
							"// Log the total header size\r",
							"console.log(\"Total header size in bytes:\", totalHeaderSize); // 4\r",
							"pm.test(\"Total header size\", function() {\r",
							"    pm.expect(totalHeaderSize).to.be.below(850);  \r",
							"});\r",
							"\r",
							"pm.test(\"Every bookingid is an integer\", function () // 5\r",
							"{\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(item).to.have.property(\"bookingid\");\r",
							"        pm.expect(Number.isInteger(item.bookingid)).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Every bookingid is not a String\", function () // 6\r",
							"{\r",
							"    jsonData.forEach(item => {\r",
							"        pm.expect(typeof item.bookingid).to.not.eql(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () // 7\r",
							"{\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Length is present\", function () // 8 \r",
							"{\r",
							"    pm.response.to.have.header(\"Content-Length\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/booking",
					"host": [
						"{{URL}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "Token",
			"value": "",
			"type": "string"
		},
		{
			"key": "First_Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "Last_Name",
			"value": "",
			"type": "string"
		},
		{
			"key": "Total_Price",
			"value": "",
			"type": "string"
		},
		{
			"key": "Checkin_Date",
			"value": "",
			"type": "string"
		},
		{
			"key": "Checkout_Date",
			"value": "",
			"type": "string"
		},
		{
			"key": "bookingid",
			"value": "",
			"type": "string"
		}
	]
}